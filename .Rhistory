q
q()
q('yes')
      assign(".RinRuby", new.env(), baseenv())
      .RinRuby$socket <- NULL
      .RinRuby$session <- function(f){
        invisible(f(.RinRuby$socket))
      }
      .RinRuby$write <- function(con, v, ...){
        invisible(lapply(list(v, ...), function(v2){
            writeBin(v2, con, endian="little")}))
      }
      .RinRuby$read <- function(con, vtype, len){
        invisible(readBin(con, vtype(), len, endian="little"))
      }
    .RinRuby$get_value <- function() {
      .RinRuby$session(function(con){
        value <- NULL
        type <- .RinRuby$read(con, integer, 1)
        length <- .RinRuby$read(con, integer, 1)
        if ( type == 0 ) {
          value <- .RinRuby$read(con, numeric, length)
        } else if ( type == 1 ) {
          value <- .RinRuby$read(con, integer, length)
        } else if ( type == 5 ) {
          value <- .RinRuby$read(con, logical, length)
        } else if ( type == 3 ) {
          value <- character(length)
          for(i in 1:length){
            value[i] <- .RinRuby$read(con, character, 1)
          }
        } else {
          value <-NULL
        }
        value
      })
    }
.RinRuby$pull <- function(var){
  .RinRuby$session(function(con){
    if ( inherits(var ,"try-error") ) {
      .RinRuby$write(con, as.integer(-2))
    } else {
      if (is.matrix(var)) {
        .RinRuby$write(con,
            as.integer(4),
            as.integer(dim(var)[1]))
      } else if ( is.double(var) ) {
        .RinRuby$write(con,
            as.integer(0),
            as.integer(length(var)),
            var)
      } else if ( is.integer(var) ) {
        .RinRuby$write(con, 
            as.integer(1),
            as.integer(length(var)),
            var)
      } else if ( is.character(var) && ( length(var) == 1 ) ) {
        .RinRuby$write(con, 
            as.integer(2),
            as.integer(nchar(var)),
            var)
      } else if ( is.character(var) && ( length(var) > 1 ) ) {
        .RinRuby$write(con, 
            as.integer(3),
            as.integer(length(var)))
      } else if ( is.logical(var) ) {
        .RinRuby$write(con, 
            as.integer(5),
            as.integer(length(var)),
            var)
      } else {
        .RinRuby$write(con, as.integer(-1))
      }
    }
  })
}
    .RinRuby$parseable <- function(var) {
      .RinRuby$session(function(con){
        result=try(parse(text=var),TRUE)
        if(inherits(result, "try-error")) {
          .RinRuby$write(con, as.integer(-1))
        } else {
          .RinRuby$write(con, as.integer(1))
        }
      })
    }
        .RinRuby$socket <- socketConnection(
            "127.0.0.1", 38687, blocking=TRUE, open="rb")
        on.exit(close(.RinRuby$socket, add = T))
.RinRuby$parse.string <- .RinRuby$get_value()
.RinRuby$parseable(.RinRuby$parse.string)
                url <- 'https://www.wordreference.com/es/en/translation.asp?spen=hola'
                quit('yes')
      assign(".RinRuby", new.env(), baseenv())
      .RinRuby$socket <- NULL
      .RinRuby$session <- function(f){
        invisible(f(.RinRuby$socket))
      }
      .RinRuby$write <- function(con, v, ...){
        invisible(lapply(list(v, ...), function(v2){
            writeBin(v2, con, endian="little")}))
      }
      .RinRuby$read <- function(con, vtype, len){
        invisible(readBin(con, vtype(), len, endian="little"))
      }
    .RinRuby$get_value <- function() {
      .RinRuby$session(function(con){
        value <- NULL
        type <- .RinRuby$read(con, integer, 1)
        length <- .RinRuby$read(con, integer, 1)
        if ( type == 0 ) {
          value <- .RinRuby$read(con, numeric, length)
        } else if ( type == 1 ) {
          value <- .RinRuby$read(con, integer, length)
        } else if ( type == 5 ) {
          value <- .RinRuby$read(con, logical, length)
        } else if ( type == 3 ) {
          value <- character(length)
          for(i in 1:length){
            value[i] <- .RinRuby$read(con, character, 1)
          }
        } else {
          value <-NULL
        }
        value
      })
    }
.RinRuby$pull <- function(var){
  .RinRuby$session(function(con){
    if ( inherits(var ,"try-error") ) {
      .RinRuby$write(con, as.integer(-2))
    } else {
      if (is.matrix(var)) {
        .RinRuby$write(con,
            as.integer(4),
            as.integer(dim(var)[1]))
      } else if ( is.double(var) ) {
        .RinRuby$write(con,
            as.integer(0),
            as.integer(length(var)),
            var)
      } else if ( is.integer(var) ) {
        .RinRuby$write(con, 
            as.integer(1),
            as.integer(length(var)),
            var)
      } else if ( is.character(var) && ( length(var) == 1 ) ) {
        .RinRuby$write(con, 
            as.integer(2),
            as.integer(nchar(var)),
            var)
      } else if ( is.character(var) && ( length(var) > 1 ) ) {
        .RinRuby$write(con, 
            as.integer(3),
            as.integer(length(var)))
      } else if ( is.logical(var) ) {
        .RinRuby$write(con, 
            as.integer(5),
            as.integer(length(var)),
            var)
      } else {
        .RinRuby$write(con, as.integer(-1))
      }
    }
  })
}
    .RinRuby$parseable <- function(var) {
      .RinRuby$session(function(con){
        result=try(parse(text=var),TRUE)
        if(inherits(result, "try-error")) {
          .RinRuby$write(con, as.integer(-1))
        } else {
          .RinRuby$write(con, as.integer(1))
        }
      })
    }
        .RinRuby$socket <- socketConnection(
            "127.0.0.1", 38501, blocking=TRUE, open="rb")
        on.exit(close(.RinRuby$socket, add = T))
.RinRuby$parse.string <- .RinRuby$get_value()
.RinRuby$parseable(.RinRuby$parse.string)
                url <- 'https://www.wordreference.com/es/en/translation.asp?spen=hola'
                quit('yes')
      assign(".RinRuby", new.env(), baseenv())
      .RinRuby$socket <- NULL
      .RinRuby$session <- function(f){
        invisible(f(.RinRuby$socket))
      }
      .RinRuby$write <- function(con, v, ...){
        invisible(lapply(list(v, ...), function(v2){
            writeBin(v2, con, endian="little")}))
      }
      .RinRuby$read <- function(con, vtype, len){
        invisible(readBin(con, vtype(), len, endian="little"))
      }
    .RinRuby$get_value <- function() {
      .RinRuby$session(function(con){
        value <- NULL
        type <- .RinRuby$read(con, integer, 1)
        length <- .RinRuby$read(con, integer, 1)
        if ( type == 0 ) {
          value <- .RinRuby$read(con, numeric, length)
        } else if ( type == 1 ) {
          value <- .RinRuby$read(con, integer, length)
        } else if ( type == 5 ) {
          value <- .RinRuby$read(con, logical, length)
        } else if ( type == 3 ) {
          value <- character(length)
          for(i in 1:length){
            value[i] <- .RinRuby$read(con, character, 1)
          }
        } else {
          value <-NULL
        }
        value
      })
    }
.RinRuby$pull <- function(var){
  .RinRuby$session(function(con){
    if ( inherits(var ,"try-error") ) {
      .RinRuby$write(con, as.integer(-2))
    } else {
      if (is.matrix(var)) {
        .RinRuby$write(con,
            as.integer(4),
            as.integer(dim(var)[1]))
      } else if ( is.double(var) ) {
        .RinRuby$write(con,
            as.integer(0),
            as.integer(length(var)),
            var)
      } else if ( is.integer(var) ) {
        .RinRuby$write(con, 
            as.integer(1),
            as.integer(length(var)),
            var)
      } else if ( is.character(var) && ( length(var) == 1 ) ) {
        .RinRuby$write(con, 
            as.integer(2),
            as.integer(nchar(var)),
            var)
      } else if ( is.character(var) && ( length(var) > 1 ) ) {
        .RinRuby$write(con, 
            as.integer(3),
            as.integer(length(var)))
      } else if ( is.logical(var) ) {
        .RinRuby$write(con, 
            as.integer(5),
            as.integer(length(var)),
            var)
      } else {
        .RinRuby$write(con, as.integer(-1))
      }
    }
  })
}
    .RinRuby$parseable <- function(var) {
      .RinRuby$session(function(con){
        result=try(parse(text=var),TRUE)
        if(inherits(result, "try-error")) {
          .RinRuby$write(con, as.integer(-1))
        } else {
          .RinRuby$write(con, as.integer(1))
        }
      })
    }
        .RinRuby$socket <- socketConnection(
            "127.0.0.1", 38746, blocking=TRUE, open="rb")
        on.exit(close(.RinRuby$socket, add = T))
.RinRuby$parse.string <- .RinRuby$get_value()
.RinRuby$parseable(.RinRuby$parse.string)
                url <- 'https://www.wordreference.com/es/en/translation.asp?spen=hola'
                quit('yes')
      assign(".RinRuby", new.env(), baseenv())
      .RinRuby$socket <- NULL
      .RinRuby$session <- function(f){
        invisible(f(.RinRuby$socket))
      }
      .RinRuby$write <- function(con, v, ...){
        invisible(lapply(list(v, ...), function(v2){
            writeBin(v2, con, endian="little")}))
      }
      .RinRuby$read <- function(con, vtype, len){
        invisible(readBin(con, vtype(), len, endian="little"))
      }
    .RinRuby$get_value <- function() {
      .RinRuby$session(function(con){
        value <- NULL
        type <- .RinRuby$read(con, integer, 1)
        length <- .RinRuby$read(con, integer, 1)
        if ( type == 0 ) {
          value <- .RinRuby$read(con, numeric, length)
        } else if ( type == 1 ) {
          value <- .RinRuby$read(con, integer, length)
        } else if ( type == 5 ) {
          value <- .RinRuby$read(con, logical, length)
        } else if ( type == 3 ) {
          value <- character(length)
          for(i in 1:length){
            value[i] <- .RinRuby$read(con, character, 1)
          }
        } else {
          value <-NULL
        }
        value
      })
    }
.RinRuby$pull <- function(var){
  .RinRuby$session(function(con){
    if ( inherits(var ,"try-error") ) {
      .RinRuby$write(con, as.integer(-2))
    } else {
      if (is.matrix(var)) {
        .RinRuby$write(con,
            as.integer(4),
            as.integer(dim(var)[1]))
      } else if ( is.double(var) ) {
        .RinRuby$write(con,
            as.integer(0),
            as.integer(length(var)),
            var)
      } else if ( is.integer(var) ) {
        .RinRuby$write(con, 
            as.integer(1),
            as.integer(length(var)),
            var)
      } else if ( is.character(var) && ( length(var) == 1 ) ) {
        .RinRuby$write(con, 
            as.integer(2),
            as.integer(nchar(var)),
            var)
      } else if ( is.character(var) && ( length(var) > 1 ) ) {
        .RinRuby$write(con, 
            as.integer(3),
            as.integer(length(var)))
      } else if ( is.logical(var) ) {
        .RinRuby$write(con, 
            as.integer(5),
            as.integer(length(var)),
            var)
      } else {
        .RinRuby$write(con, as.integer(-1))
      }
    }
  })
}
    .RinRuby$parseable <- function(var) {
      .RinRuby$session(function(con){
        result=try(parse(text=var),TRUE)
        if(inherits(result, "try-error")) {
          .RinRuby$write(con, as.integer(-1))
        } else {
          .RinRuby$write(con, as.integer(1))
        }
      })
    }
        .RinRuby$socket <- socketConnection(
            "127.0.0.1", 39375, blocking=TRUE, open="rb")
        on.exit(close(.RinRuby$socket, add = T))
.RinRuby$parse.string <- .RinRuby$get_value()
.RinRuby$parseable(.RinRuby$parse.string)
                url <- 'https://www.wordreference.com/es/en/translation.asp?spen=hola'
                quit('yes')
